-ifndef(epeg_h).
-define(epeg_h, 1).

-define(DEBUG, true).
-ifdef(DEBUG).
-ifdef(TEST).
-define(LOG(X), io:fwrite(user, "{~p,~p}: ~p: ~p~n", [?MODULE, ?LINE, ??X, X])).
-else.
-define(LOG(X), io:format(user, "{~p,~p}: ~p: ~p~n", [?MODULE, ?LINE, ??X, X])).
-endif.
-else.
-define(LOG(X), true).
-endif.

-type index() :: pos_integer().
-type input() :: string().
-type state() :: {index(), input(), ([] | {index(), []})}.
-type transformer() :: fun(([]) -> []).
-type fail_reason() :: {mismatch, list()} | eof.
-type result(S) :: {ok, S} | {fail, fail_reason(), S}.
-type parsed_result() :: result(state()).
-type parser() :: fun((state()) -> parsed_result()).
-type parser_continuation() :: fun((parsed_result()) -> parsed_result()).
-type cps_parser() :: fun((state(), any(), parser_continuation()) -> parsed_result()).
-endif.
