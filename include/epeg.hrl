-ifndef(epeg_h).
-define(epeg_h, 1).

-define(DEBUG, true).
-ifdef(DEBUG).
-ifdef(TEST).
-define(LOG(X), io:fwrite(user, "{~p,~p}: ~p: ~p~n", [?MODULE, ?LINE, ??X, X])).
-else.
-define(LOG(X), io:format(user, "{~p,~p}: ~p: ~p~n", [?MODULE, ?LINE, ??X, X])).
-endif.
-else.
-define(LOG(X), true).
-endif.

-type index() :: pos_integer().
-type parsed() :: any().
-type input() :: string().
-type state() :: {index(), input(), ([parsed()] | {index(), [parsed()]})}.
-type transformer() :: fun(([parsed()]) -> [parsed()]).
-type result(S) :: {ok, S} | {fail, fail_reason(), S}.
-type fail_reason() :: {mismatch, list()} | eof.
-type parser() :: fun((state()) -> result(state())).
-endif.
